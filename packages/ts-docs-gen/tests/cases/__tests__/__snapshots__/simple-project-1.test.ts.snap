// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`simple-project-1 1`] = `
Array [
  Object {
    "FileLocation": "index.md",
    "Result": Array [
      "[ClassDeclaration-0]: index/foo.md#class-foo",
      "[ClassDeclaration-1]: index/world.md#class-world",
      "[ClassDeclaration-2]: index/earth.md#class-earth",
      "# index",
      "",
      "## EnumList",
      "",
      "Simple list.",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumList {",
      "     FirstOption = 0,",
      "     SecondOption = 1,",
      "     ThirdOption = 2",
      "}",
      "\`\`\`",
      "",
      "| Name         | Value | Description                    |",
      "| ------------ | ----- | ------------------------------ |",
      "| FirstOption  | 0     | Description for First option.  |",
      "| SecondOption | 1     | Description for Second option. |",
      "| ThirdOption  | 2     | Description for Third option.  |",
      "",
      "## EnumListWithNumberValues",
      "",
      "List with number values with no punctuation at the end of description",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumListWithNumberValues {",
      "     FirstOption = 1,",
      "     SecondOption = 2,",
      "     ThirdOption = 3",
      "}",
      "\`\`\`",
      "",
      "| Name         | Value |",
      "| ------------ | ----- |",
      "| FirstOption  | 1     |",
      "| SecondOption | 2     |",
      "| ThirdOption  | 3     |",
      "",
      "## EnumListWithStringValues",
      "",
      "<span style=\\"color: #d2d255;\\">Warning: Beta!</span>",
      "",
      "<span style=\\"color: red;\\">Deprecated!</span>",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumListWithStringValues {",
      "     FirstOption = \\"first\\",",
      "     SecondOption = \\"second\\",",
      "     ThirdOption = \\"third\\"",
      "}",
      "\`\`\`",
      "",
      "| Name         | Value    |",
      "| ------------ | -------- |",
      "| FirstOption  | \\"first\\"  |",
      "| SecondOption | \\"second\\" |",
      "| ThirdOption  | \\"third\\"  |",
      "",
      "## SampleConst",
      "",
      "\`\`\`typescript",
      "const SampleConst: string;",
      "\`\`\`",
      "",
      "### Type",
      "",
      "string",
      "",
      "## [Foo][ClassDeclaration-0]",
      "",
      "## [World][ClassDeclaration-1]",
      "",
      "## [Earth][ClassDeclaration-2]",
      "",
      "## AnotherFoo(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function AnotherFoo<T extends Object>(parameter1: string, parameter2: Promise<T>): string",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "",
      "### Parameters",
      "",
      "| Name       | Type    |",
      "| ---------- | ------- |",
      "| parameter1 | string  |",
      "| parameter2 | Promise |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## GetFoo()",
      "",
      "\`\`\`typescript",
      "function GetFoo(): Promise<void>",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "Promise",
      "",
      "",
      "## FunctionWithOneParameter(parameter)",
      "",
      "\`\`\`typescript",
      "function FunctionWithOneParameter(parameter: string): void",
      "\`\`\`",
      "",
      "### Parameters",
      "",
      "| Name      | Type   |",
      "| --------- | ------ |",
      "| parameter | string |",
      "",
      "### Return type",
      "",
      "void",
      "",
      "",
      "## FunctionWithNoParameters()",
      "",
      "\`\`\`typescript",
      "function FunctionWithNoParameters(): void",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "void",
      "",
      "",
      "## FunctionWithMultipleParameters(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function FunctionWithMultipleParameters(parameter1: string, parameter2: number): void",
      "\`\`\`",
      "",
      "### Parameters",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | number |",
      "",
      "### Return type",
      "",
      "void",
      "",
      "",
      "## Bar(parameter1, parameter2)",
      "",
      "<span style=\\"color: #d2d255;\\">Warning: Beta!</span>",
      "",
      "<span style=\\"color: red;\\">Deprecated!</span>",
      "",
      "Some general comment about Bar function.",
      "",
      "\`\`\`typescript",
      "function Bar(parameter1: string, parameter2: number): string",
      "\`\`\`",
      "",
      "### Parameters",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | number |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## FunctionWithMultipleTypeParameters(parameter1, parameter2)",
      "",
      "Comment on Function with multiple type parameters.",
      "",
      "\`\`\`typescript",
      "function FunctionWithMultipleTypeParameters<T extends Object, P>(parameter1: T, parameter2: P): string",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "| P    |                 |",
      "",
      "### Parameters",
      "",
      "| Name       | Type |",
      "| ---------- | ---- |",
      "| parameter1 | T    |",
      "| parameter2 | P    |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## FunctionWithTypeParameterDefault(parameter1, parameter2)",
      "",
      "Some general comment about Function with type parameter default function.",
      "",
      "\`\`\`typescript",
      "function FunctionWithTypeParameterDefault<T extends Object = {}>(parameter1: string, parameter2: T): string",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type | Default type |",
      "| ---- | --------------- | ------------ |",
      "| T    | Object          | \\\\{\\\\}         |",
      "",
      "### Parameters",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | T      |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## FunctionWithTypeParameterConstraint(parameter1, parameter2)",
      "",
      "Some general comment about AnotherBar function.",
      "",
      "\`\`\`typescript",
      "function FunctionWithTypeParameterConstraint<T extends Object>(parameter1: string, parameter2: T): string",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "",
      "### Parameters",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | T      |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## FunctionWithoutReturnType(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function FunctionWithoutReturnType<T extends T[]>(parameter1: string, parameter2: Promise<T>): string",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Array           |",
      "",
      "### Parameters",
      "",
      "| Name       | Type    |",
      "| ---------- | ------- |",
      "| parameter1 | string  |",
      "| parameter2 | Promise |",
      "",
      "### Return type",
      "",
      "string",
      "",
      "",
      "## FunctionWithGenericReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithGenericReturnType(): string[]",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "Array",
      "",
      "",
      "## FunctionWithPrimitiveReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithPrimitiveReturnType(): boolean",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "true | false",
      "",
      "",
      "## FunctionWithUnionReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithUnionReturnType(): \\"something\\" | \\"nothing\\"",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "\\"something\\" | \\"nothing\\"",
      "",
      "",
      "## FunctionWithIntersectionReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithIntersectionReturnType(): Earth & World",
      "\`\`\`",
      "",
      "### Return type",
      "",
      "[Earth][ClassDeclaration-2] & [World][ClassDeclaration-1]",
      "",
      "",
      "## MyFunction()",
      "",
      "Function with TypeParameter as TypeLiteral.",
      "",
      "\`\`\`typescript",
      "function MyFunction<T extends { myProperty: string; myPropertyTwo?: number | undefined; } = { myProperty: string; }>(): T",
      "\`\`\`",
      "",
      "### Type parameters",
      "",
      "| Name | Constraint type                                                | Default type              |",
      "| ---- | -------------------------------------------------------------- | ------------------------- |",
      "| T    | \\\\{ myProperty: string; myPropertyTwo?: number \\\\| undefined; \\\\} | \\\\{ myProperty: string; \\\\} |",
      "",
      "### Return type",
      "",
      "T",
      "",
      "",
      "",
    ],
  },
  Object {
    "FileLocation": "index\\\\foo.md",
    "Result": Array [
      "## class: Foo",
      "",
    ],
  },
  Object {
    "FileLocation": "index\\\\world.md",
    "Result": Array [
      "## class: World",
      "",
    ],
  },
  Object {
    "FileLocation": "index\\\\earth.md",
    "Result": Array [
      "## class: Earth",
      "",
    ],
  },
]
`;
