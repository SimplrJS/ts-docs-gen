// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`simple-project-1 1`] = `
Array [
  Object {
    "FileLocation": "index.md",
    "Result": Array [
      "[SourceFile-0]: index.md#index",
      "[FunctionDeclaration-0]: index.md#anotherfooparameter1-parameter2",
      "[FunctionDeclaration-1]: index.md#getfoo",
      "[FunctionDeclaration-2]: index.md#functionwithoneparameterparameter",
      "[FunctionDeclaration-3]: index.md#functionwithnoparameters",
      "[FunctionDeclaration-4]: index.md#functionwithmultipleparametersparameter1-parameter2",
      "[FunctionDeclaration-5]: index.md#barparameter1-parameter2",
      "[FunctionDeclaration-6]: index.md#functionwithmultipletypeparametersparameter1-parameter2",
      "[FunctionDeclaration-7]: index.md#functionwithtypeparameterdefaultparameter1-parameter2",
      "[FunctionDeclaration-8]: index.md#functionwithtypeparameterconstraintparameter1-parameter2",
      "[FunctionDeclaration-9]: index.md#functionwithoutreturntypeparameter1-parameter2",
      "[FunctionDeclaration-10]: index.md#functionwithgenericreturntype",
      "[FunctionDeclaration-11]: index.md#functionwithprimitivereturntype",
      "[FunctionDeclaration-12]: index.md#functionwithunionreturntype",
      "[FunctionDeclaration-13]: index.md#functionwithintersectionreturntype",
      "[ClassDeclaration-2]: index/earth.md#earth",
      "[ClassDeclaration-1]: index/world.md#world",
      "[FunctionDeclaration-14]: index.md#myfunction",
      "[FunctionDeclaration-15]: index.md#functionwithinitializednumberparametersomeparameter",
      "[FunctionDeclaration-16]: index.md#functionwithinitializedstringparametersomeparameter",
      "[InterfaceDeclaration-0]: index.md#extendedbar",
      "[InterfaceDeclaration-1]: index.md#foointerface",
      "[InterfaceDeclaration-2]: index.md#boo",
      "[InterfaceDeclaration-1]: index.md#foointerface",
      "[InterfaceDeclaration-2]: index.md#boo",
      "[InterfaceDeclaration-3]: index.md#anotherinterface",
      "[InterfaceDeclaration-4]: index.md#myconstrainttype",
      "[InterfaceDeclaration-5]: index.md#mydefaulttype",
      "[InterfaceDeclaration-4]: index.md#myconstrainttype",
      "[InterfaceDeclaration-6]: index.md#objectsinterface",
      "[InterfaceDeclaration-7]: index.md#interfacewithcall",
      "[InterfaceDeclaration-8]: index.md#interfacewithconstrainttype",
      "[InterfaceDeclaration-9]: index.md#dictionary",
      "[InterfaceDeclaration-10]: index.md#interfacewithmethod",
      "[InterfaceDeclaration-9]: index.md#dictionary",
      "[InterfaceDeclaration-9]: index.md#dictionary",
      "[InterfaceDeclaration-11]: index.md#methodsinterface",
      "[InterfaceDeclaration-12]: index.md#monsterinterface",
      "[InterfaceDeclaration-6]: index.md#objectsinterface",
      "[InterfaceDeclaration-12]: index.md#monsterinterface",
      "[InterfaceDeclaration-13]: index.md#someinterface",
      "[InterfaceDeclaration-14]: index.md#stringsdictionary",
      "[InterfaceDeclaration-15]: index.md#myinterface",
      "[EnumDeclaration-0]: index.md#enumlist",
      "[EnumDeclaration-1]: index.md#enumlistwithnumbervalues",
      "[EnumDeclaration-2]: index.md#enumlistwithstringvalues",
      "[ClassDeclaration-0]: index/foo.md#foo",
      "[ClassDeclaration-1]: index/world.md#world",
      "[ClassDeclaration-2]: index/earth.md#earth",
      "[VariableDeclaration-0]: index.md#sampleconst",
      "# Table of contents",
      "",
      "* [index][SourceFile-0]",
      "    * Functions",
      "        * [AnotherFoo(parameter1, parameter2)][FunctionDeclaration-0]",
      "        * [GetFoo()][FunctionDeclaration-1]",
      "        * [FunctionWithOneParameter(parameter)][FunctionDeclaration-2]",
      "        * [FunctionWithNoParameters()][FunctionDeclaration-3]",
      "        * [FunctionWithMultipleParameters(parameter1, parameter2)][FunctionDeclaration-4]",
      "        * [Bar(parameter1, parameter2)][FunctionDeclaration-5]",
      "        * [FunctionWithMultipleTypeParameters(parameter1, parameter2)][FunctionDeclaration-6]",
      "        * [FunctionWithTypeParameterDefault(parameter1, parameter2)][FunctionDeclaration-7]",
      "        * [FunctionWithTypeParameterConstraint(parameter1, parameter2)][FunctionDeclaration-8]",
      "        * [FunctionWithoutReturnType(parameter1, parameter2)][FunctionDeclaration-9]",
      "        * [FunctionWithGenericReturnType()][FunctionDeclaration-10]",
      "        * [FunctionWithPrimitiveReturnType()][FunctionDeclaration-11]",
      "        * [FunctionWithUnionReturnType()][FunctionDeclaration-12]",
      "        * [FunctionWithIntersectionReturnType()][FunctionDeclaration-13]",
      "        * [MyFunction()][FunctionDeclaration-14]",
      "        * [FunctionWithInitializedNumberParameter(someParameter)][FunctionDeclaration-15]",
      "        * [FunctionWithInitializedStringParameter(someParameter)][FunctionDeclaration-16]",
      "    * Interfaces",
      "        * [ExtendedBar][InterfaceDeclaration-0]",
      "        * [FooInterface][InterfaceDeclaration-1]",
      "        * [Boo][InterfaceDeclaration-2]",
      "        * [AnotherInterface][InterfaceDeclaration-3]",
      "        * [MyConstraintType][InterfaceDeclaration-4]",
      "        * [MyDefaultType][InterfaceDeclaration-5]",
      "        * [ObjectsInterface][InterfaceDeclaration-6]",
      "        * [InterfaceWithCall][InterfaceDeclaration-7]",
      "        * [InterfaceWithConstraintType][InterfaceDeclaration-8]",
      "        * [InterfaceWithMethod][InterfaceDeclaration-10]",
      "        * [Dictionary][InterfaceDeclaration-9]",
      "        * [MethodsInterface][InterfaceDeclaration-11]",
      "        * [MonsterInterface][InterfaceDeclaration-12]",
      "        * [SomeInterface][InterfaceDeclaration-13]",
      "        * [StringsDictionary][InterfaceDeclaration-14]",
      "        * [MyInterface][InterfaceDeclaration-15]",
      "    * Enums",
      "        * [EnumList][EnumDeclaration-0]",
      "        * [EnumListWithNumberValues][EnumDeclaration-1]",
      "        * [EnumListWithStringValues][EnumDeclaration-2]",
      "    * Variables",
      "        * [SampleConst][VariableDeclaration-0]",
      "",
      "# index",
      "",
      "## Functions",
      "",
      "### AnotherFoo(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function AnotherFoo<T extends Object>(parameter1: string, parameter2: Promise<T>): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "",
      "**Parameters**",
      "",
      "| Name       | Type                 |",
      "| ---------- | -------------------- |",
      "| parameter1 | string               |",
      "| parameter2 | Promise&\\\\#60;T&\\\\#62; |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### GetFoo()",
      "",
      "\`\`\`typescript",
      "function GetFoo(): Promise<void>",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "Promise&#60;void&#62;",
      "",
      "----------",
      "",
      "### FunctionWithOneParameter(parameter)",
      "",
      "\`\`\`typescript",
      "function FunctionWithOneParameter(parameter: string): void",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name      | Type   |",
      "| --------- | ------ |",
      "| parameter | string |",
      "",
      "**Return type**",
      "",
      "void",
      "",
      "----------",
      "",
      "### FunctionWithNoParameters()",
      "",
      "\`\`\`typescript",
      "function FunctionWithNoParameters(): void",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "void",
      "",
      "----------",
      "",
      "### FunctionWithMultipleParameters(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function FunctionWithMultipleParameters(parameter1: string, parameter2: number): void",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | number |",
      "",
      "**Return type**",
      "",
      "void",
      "",
      "----------",
      "",
      "### Bar(parameter1, parameter2)",
      "",
      "<span style=\\"color: #d2d255;\\">Warning: Beta!</span>",
      "",
      "<span style=\\"color: red;\\">Deprecated!</span>",
      "",
      "Some general comment about Bar function.",
      "",
      "\`\`\`typescript",
      "function Bar(parameter1: string, parameter2: number): string",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | number |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### FunctionWithMultipleTypeParameters(parameter1, parameter2)",
      "",
      "Comment on Function with multiple type parameters.",
      "",
      "\`\`\`typescript",
      "function FunctionWithMultipleTypeParameters<T extends Object, P>(parameter1: T, parameter2: P): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "| P    |                 |",
      "",
      "**Parameters**",
      "",
      "| Name       | Type | Description           |",
      "| ---------- | ---- | --------------------- |",
      "| parameter1 | T    | Parameter one comment |",
      "| parameter2 | P    | Parameter two comment |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### FunctionWithTypeParameterDefault(parameter1, parameter2)",
      "",
      "Some general comment about Function with type parameter default function.",
      "",
      "\`\`\`typescript",
      "function FunctionWithTypeParameterDefault<T extends Object = {}>(parameter1: string, parameter2: T): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type | Default type |",
      "| ---- | --------------- | ------------ |",
      "| T    | Object          | {}           |",
      "",
      "**Parameters**",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | T      |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### FunctionWithTypeParameterConstraint(parameter1, parameter2)",
      "",
      "Some general comment about AnotherBar function.",
      "",
      "\`\`\`typescript",
      "function FunctionWithTypeParameterConstraint<T extends Object>(parameter1: string, parameter2: T): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type |",
      "| ---- | --------------- |",
      "| T    | Object          |",
      "",
      "**Parameters**",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| parameter1 | string |",
      "| parameter2 | T      |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### FunctionWithoutReturnType(parameter1, parameter2)",
      "",
      "\`\`\`typescript",
      "function FunctionWithoutReturnType<T extends T[]>(parameter1: string, parameter2: Promise<T>): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type  |",
      "| ---- | ---------------- |",
      "| T    | Array&#60;T&#62; |",
      "",
      "**Parameters**",
      "",
      "| Name       | Type                 |",
      "| ---------- | -------------------- |",
      "| parameter1 | string               |",
      "| parameter2 | Promise&\\\\#60;T&\\\\#62; |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### FunctionWithGenericReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithGenericReturnType(): string[]",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "Array&#60;string&#62;",
      "",
      "----------",
      "",
      "### FunctionWithPrimitiveReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithPrimitiveReturnType(): boolean",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "true | false",
      "",
      "----------",
      "",
      "### FunctionWithUnionReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithUnionReturnType(): \\"something\\" | \\"nothing\\"",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "\\"something\\" | \\"nothing\\"",
      "",
      "----------",
      "",
      "### FunctionWithIntersectionReturnType()",
      "",
      "\`\`\`typescript",
      "function FunctionWithIntersectionReturnType(): Earth & World",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "[Earth][ClassDeclaration-2] & [World][ClassDeclaration-1]",
      "",
      "----------",
      "",
      "### MyFunction()",
      "",
      "Function with TypeParameter as TypeLiteral.",
      "",
      "\`\`\`typescript",
      "function MyFunction<T extends { myProperty: string; myPropertyTwo?: number | undefined; } = { myProperty: string; }>(): T",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name | Constraint type                                             | Default type            |",
      "| ---- | ----------------------------------------------------------- | ----------------------- |",
      "| T    | { myProperty: string; myPropertyTwo?: number | undefined; } | { myProperty: string; } |",
      "",
      "**Return type**",
      "",
      "T",
      "",
      "----------",
      "",
      "### FunctionWithInitializedNumberParameter(someParameter)",
      "",
      "\`\`\`typescript",
      "function FunctionWithInitializedNumberParameter(someParameter: number = 12): number",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name          | Type   |",
      "| ------------- | ------ |",
      "| someParameter | number |",
      "",
      "**Return type**",
      "",
      "number",
      "",
      "----------",
      "",
      "### FunctionWithInitializedStringParameter(someParameter)",
      "",
      "\`\`\`typescript",
      "function FunctionWithInitializedStringParameter(someParameter: string = \\"12\\"): string",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name          | Type   |",
      "| ------------- | ------ |",
      "| someParameter | string |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "## Interfaces",
      "",
      "### ExtendedBar",
      "",
      "\`\`\`typescript",
      "interface ExtendedBar extends FooInterface<number>, Boo {",
      "    OtherStuff: string[];",
      "}",
      "\`\`\`",
      "",
      "**Extends**",
      "",
      "[FooInterface][InterfaceDeclaration-1]&#60;number&#62;",
      "",
      "[Boo][InterfaceDeclaration-2]",
      "",
      "**Properties**",
      "",
      "| Name       | Type                  |",
      "| ---------- | --------------------- |",
      "| OtherStuff | Array&#60;string&#62; |",
      "",
      "----------",
      "",
      "### FooInterface",
      "",
      "\`\`\`typescript",
      "interface FooInterface<TType> {",
      "    Name: string;",
      "    Surname: string;",
      "    Type: TType;",
      "}",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name  |",
      "| ----- |",
      "| TType |",
      "",
      "**Properties**",
      "",
      "| Name    | Type   |",
      "| ------- | ------ |",
      "| Name    | string |",
      "| Surname | string |",
      "| Type    | TType  |",
      "",
      "----------",
      "",
      "### Boo",
      "",
      "\`\`\`typescript",
      "interface Boo {",
      "    Boos: string[];",
      "}",
      "\`\`\`",
      "",
      "**Properties**",
      "",
      "| Name | Type                  |",
      "| ---- | --------------------- |",
      "| Boos | Array&#60;string&#62; |",
      "",
      "----------",
      "",
      "### AnotherInterface",
      "",
      "\`\`\`typescript",
      "interface AnotherInterface {",
      "    <TValue>(param1: TValue, param2: TValue): boolean;",
      "}",
      "\`\`\`",
      "",
      "#### Call",
      "",
      "\`\`\`typescript",
      "<TValue>(param1: TValue, param2: TValue): boolean",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name   |",
      "| ------ |",
      "| TValue |",
      "",
      "**Parameters**",
      "",
      "| Name   | Type   |",
      "| ------ | ------ |",
      "| param1 | TValue |",
      "| param2 | TValue |",
      "",
      "**Return type**",
      "",
      "true | false",
      "",
      "----------",
      "",
      "### MyConstraintType",
      "",
      "\`\`\`typescript",
      "interface MyConstraintType {",
      "    myProperty: string;",
      "}",
      "\`\`\`",
      "",
      "**Properties**",
      "",
      "| Name       | Type   |",
      "| ---------- | ------ |",
      "| myProperty | string |",
      "",
      "----------",
      "",
      "### MyDefaultType",
      "",
      "\`\`\`typescript",
      "interface MyDefaultType extends MyConstraintType {",
      "    anotherProperty: number;",
      "}",
      "\`\`\`",
      "",
      "**Extends**",
      "",
      "[MyConstraintType][InterfaceDeclaration-4]",
      "",
      "**Properties**",
      "",
      "| Name            | Type   |",
      "| --------------- | ------ |",
      "| anotherProperty | number |",
      "",
      "----------",
      "",
      "### ObjectsInterface",
      "",
      "\`\`\`typescript",
      "interface ObjectsInterface {",
      "    objectOne: Object;",
      "    objectTwo: Object;",
      "}",
      "\`\`\`",
      "",
      "**Properties**",
      "",
      "| Name      | Type   |",
      "| --------- | ------ |",
      "| objectOne | Object |",
      "| objectTwo | Object |",
      "",
      "----------",
      "",
      "### InterfaceWithCall",
      "",
      "\`\`\`typescript",
      "interface InterfaceWithCall {",
      "    <T>(): { someProperty: T; };",
      "}",
      "\`\`\`",
      "",
      "#### Call",
      "",
      "\`\`\`typescript",
      "<T>(): { someProperty: T; }",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Return type**",
      "",
      "{ someProperty: T; }",
      "",
      "----------",
      "",
      "### InterfaceWithConstraintType",
      "",
      "\`\`\`typescript",
      "interface InterfaceWithConstraintType extends Dictionary<string> {",
      "    someProperty: string;",
      "}",
      "\`\`\`",
      "",
      "**Extends**",
      "",
      "[Dictionary][InterfaceDeclaration-9]&#60;string&#62;",
      "",
      "**Properties**",
      "",
      "| Name         | Type   |",
      "| ------------ | ------ |",
      "| someProperty | string |",
      "",
      "----------",
      "",
      "### InterfaceWithMethod",
      "",
      "\`\`\`typescript",
      "interface InterfaceWithMethod<T> {",
      "    someMethodOne(): T;",
      "    someMethodTwo<TReturn>(): TReturn;",
      "}",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "#### Methods",
      "",
      "\`\`\`typescript",
      "someMethodOne(): T",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "T",
      "",
      "\`\`\`typescript",
      "someMethodTwo<TReturn>(): TReturn",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name    |",
      "| ------- |",
      "| TReturn |",
      "",
      "**Return type**",
      "",
      "TReturn",
      "",
      "----------",
      "",
      "### Dictionary",
      "",
      "\`\`\`typescript",
      "interface Dictionary<TValue> {",
      "    new (): Dictionary<TValue>;",
      "    [key: string]: TValue;",
      "}",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name   |",
      "| ------ |",
      "| TValue |",
      "",
      "#### Construct",
      "",
      "\`\`\`typescript",
      "new (): Dictionary<TValue>",
      "\`\`\`",
      "",
      "**Return type**",
      "",
      "[Dictionary][InterfaceDeclaration-9]&#60;TValue&#62;",
      "",
      "#### Index signatures",
      "",
      "\`\`\`typescript",
      "[key: string]: TValue",
      "\`\`\`",
      "",
      "* *Parameter* \`key\` - string",
      "* *Type* TValue",
      "",
      "----------",
      "",
      "### MethodsInterface",
      "",
      "\`\`\`typescript",
      "interface MethodsInterface {",
      "    <TValue>(arg: TValue): void;",
      "    someMethod<T>(): string;",
      "}",
      "\`\`\`",
      "",
      "#### Call",
      "",
      "\`\`\`typescript",
      "<TValue>(arg: TValue): void",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name   |",
      "| ------ |",
      "| TValue |",
      "",
      "**Parameters**",
      "",
      "| Name | Type   |",
      "| ---- | ------ |",
      "| arg  | TValue |",
      "",
      "**Return type**",
      "",
      "void",
      "",
      "#### Methods",
      "",
      "\`\`\`typescript",
      "someMethod<T>(): string",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "----------",
      "",
      "### MonsterInterface",
      "",
      "<span style=\\"color: #d2d255;\\">Warning: Beta!</span>",
      "",
      "<span style=\\"color: red;\\">Deprecated!</span>",
      "",
      "Monster interface",
      "",
      "\`\`\`typescript",
      "interface MonsterInterface<TValue extends Object = {}> extends ObjectsInterface {",
      "    new <T>(): MonsterInterface<T>;",
      "    new (someParameter: string): string;",
      "    <T>(): { someProperty: T; };",
      "    <T>(key?: string | undefined): { someProperty: T; };",
      "    <T>(key: number): { someProperty: T; };",
      "    readonly [key: string]: TValue;",
      "    readonly objectOne: TValue;",
      "    objectTwo: TValue;",
      "}",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name   | Constraint type | Default type |",
      "| ------ | --------------- | ------------ |",
      "| TValue | Object          | {}           |",
      "",
      "**Extends**",
      "",
      "[ObjectsInterface][InterfaceDeclaration-6]",
      "",
      "#### Construct",
      "",
      "\`\`\`typescript",
      "new <T>(): MonsterInterface<T>",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Return type**",
      "",
      "[MonsterInterface][InterfaceDeclaration-12]&#60;T&#62;",
      "",
      "\`\`\`typescript",
      "new (someParameter: string): string",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name          | Type   |",
      "| ------------- | ------ |",
      "| someParameter | string |",
      "",
      "**Return type**",
      "",
      "string",
      "",
      "#### Call",
      "",
      "\`\`\`typescript",
      "<T>(): { someProperty: T; }",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Return type**",
      "",
      "{ someProperty: T; }",
      "",
      "\`\`\`typescript",
      "<T>(key?: string | undefined): { someProperty: T; }",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Parameters**",
      "",
      "| Name | Type                    |",
      "| ---- | ----------------------- |",
      "| key  | undefined &#124; string |",
      "",
      "**Return type**",
      "",
      "{ someProperty: T; }",
      "",
      "\`\`\`typescript",
      "<T>(key: number): { someProperty: T; }",
      "\`\`\`",
      "",
      "**Type parameters**",
      "",
      "| Name |",
      "| ---- |",
      "| T    |",
      "",
      "**Parameters**",
      "",
      "| Name | Type   |",
      "| ---- | ------ |",
      "| key  | number |",
      "",
      "**Return type**",
      "",
      "{ someProperty: T; }",
      "",
      "#### Index signatures",
      "",
      "\`\`\`typescript",
      "readonly [key: string]: TValue",
      "\`\`\`",
      "",
      "* *Parameter* \`key\` - string",
      "* *Type* TValue",
      "",
      "**Properties**",
      "",
      "| Name      | Type   |",
      "| --------- | ------ |",
      "| objectOne | TValue |",
      "| objectTwo | TValue |",
      "",
      "----------",
      "",
      "### SomeInterface",
      "",
      "\`\`\`typescript",
      "interface SomeInterface {",
      "    [key: string]: string | number;",
      "    [key: number]: string;",
      "}",
      "\`\`\`",
      "",
      "#### Index signatures",
      "",
      "\`\`\`typescript",
      "[key: string]: string | number",
      "\`\`\`",
      "",
      "* *Parameter* \`key\` - string",
      "* *Type* string | number",
      "",
      "\`\`\`typescript",
      "[key: number]: string",
      "\`\`\`",
      "",
      "* *Parameter* \`key\` - number",
      "* *Type* string",
      "",
      "----------",
      "",
      "### StringsDictionary",
      "",
      "\`\`\`typescript",
      "interface StringsDictionary {",
      "    [key: string]: string;",
      "}",
      "\`\`\`",
      "",
      "#### Index signatures",
      "",
      "\`\`\`typescript",
      "[key: string]: string",
      "\`\`\`",
      "",
      "* *Parameter* \`key\` - string",
      "* *Type* string",
      "",
      "----------",
      "",
      "### MyInterface",
      "",
      "\`\`\`typescript",
      "interface MyInterface {",
      "    MyPropertyOne: string;",
      "    MyPropertyTwo: Object;",
      "    MyPropertyThree: number;",
      "}",
      "\`\`\`",
      "",
      "**Properties**",
      "",
      "| Name            | Type   |",
      "| --------------- | ------ |",
      "| MyPropertyOne   | string |",
      "| MyPropertyTwo   | Object |",
      "| MyPropertyThree | number |",
      "",
      "## Enums",
      "",
      "### EnumList",
      "",
      "Simple list.",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumList {",
      "     FirstOption = 0,",
      "     SecondOption = 1,",
      "     ThirdOption = 2",
      "}",
      "\`\`\`",
      "",
      "**Members**",
      "",
      "| Name         | Value | Description                    |",
      "| ------------ | ----- | ------------------------------ |",
      "| FirstOption  | 0     | Description for First option.  |",
      "| SecondOption | 1     | Description for Second option. |",
      "| ThirdOption  | 2     | Description for Third option.  |",
      "",
      "----------",
      "",
      "### EnumListWithNumberValues",
      "",
      "List with number values with no punctuation at the end of description",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumListWithNumberValues {",
      "     FirstOption = 1,",
      "     SecondOption = 2,",
      "     ThirdOption = 3",
      "}",
      "\`\`\`",
      "",
      "**Members**",
      "",
      "| Name         | Value |",
      "| ------------ | ----- |",
      "| FirstOption  | 1     |",
      "| SecondOption | 2     |",
      "| ThirdOption  | 3     |",
      "",
      "----------",
      "",
      "### EnumListWithStringValues",
      "",
      "<span style=\\"color: #d2d255;\\">Warning: Beta!</span>",
      "",
      "<span style=\\"color: red;\\">Deprecated!</span>",
      "",
      "",
      "\`\`\`typescript",
      "enum EnumListWithStringValues {",
      "     FirstOption = \\"first\\",",
      "     SecondOption = \\"second\\",",
      "     ThirdOption = \\"third\\"",
      "}",
      "\`\`\`",
      "",
      "**Members**",
      "",
      "| Name         | Value    |",
      "| ------------ | -------- |",
      "| FirstOption  | \\"first\\"  |",
      "| SecondOption | \\"second\\" |",
      "| ThirdOption  | \\"third\\"  |",
      "",
      "## Classes",
      "",
      "### [Foo][ClassDeclaration-0]",
      "",
      "----------",
      "",
      "### [World][ClassDeclaration-1]",
      "",
      "----------",
      "",
      "### [Earth][ClassDeclaration-2]",
      "",
      "## Variables",
      "",
      "### SampleConst",
      "",
      "\`\`\`typescript",
      "const SampleConst: string;",
      "\`\`\`",
      "",
      "**Type**",
      "",
      "string",
      "",
    ],
  },
  Object {
    "FileLocation": "index/foo.md",
    "Result": Array [
      "[ClassDeclaration-0]: foo.md#foo",
      "[MethodDeclaration-0]: foo.md#handlemessagemessage",
      "# Table of contents",
      "",
      "* [Foo][ClassDeclaration-0]",
      "    * Methods",
      "        * [HandleMessage(message)][MethodDeclaration-0]",
      "",
      "# Foo",
      "",
      "\`\`\`typescript",
      "class Foo",
      "\`\`\`",
      "## Methods",
      "",
      "### HandleMessage(message)",
      "",
      "\`\`\`typescript",
      "public HandleMessage(message: string): string",
      "\`\`\`",
      "",
      "**Parameters**",
      "",
      "| Name    | Type   |",
      "| ------- | ------ |",
      "| message | string |",
      "",
      "**Return type**",
      "",
      "string",
      "",
    ],
  },
  Object {
    "FileLocation": "index/world.md",
    "Result": Array [
      "[ClassDeclaration-1]: world.md#world",
      "# World",
      "",
      "\`\`\`typescript",
      "class World",
      "\`\`\`",
    ],
  },
  Object {
    "FileLocation": "index/earth.md",
    "Result": Array [
      "[ClassDeclaration-2]: earth.md#earth",
      "# Earth",
      "",
      "\`\`\`typescript",
      "class Earth",
      "\`\`\`",
    ],
  },
]
`;
